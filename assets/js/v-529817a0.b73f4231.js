(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[857],{876:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-529817a0",path:"/algorithm/linked-list.html",title:"链表",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"反转整个链表",slug:"反转整个链表",children:[]},{level:2,title:"反转链表的前n个节点",slug:"反转链表的前n个节点",children:[]},{level:2,title:"反转链表的一部分",slug:"反转链表的一部分",children:[]},{level:2,title:"k个一组反转链表",slug:"k个一组反转链表",children:[]}],filePathRelative:"algorithm/linked-list.md",git:{updatedTime:1626329441e3,contributors:[{name:"tinyking",email:"akingchao@qq.com",commits:2}]}}},426:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(252).uE)('<h1 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h1><h2 id="反转整个链表" tabindex="-1"><a class="header-anchor" href="#反转整个链表" aria-hidden="true">#</a> 反转整个链表</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseLinked</span> <span class="token punctuation">{</span>\n\n\t<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 识别尾节点</span>\n\t\t\t<span class="token keyword">return</span> head<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\thead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\t\thead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> last<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="反转链表的前n个节点" tabindex="-1"><a class="header-anchor" href="#反转链表的前n个节点" aria-hidden="true">#</a> 反转链表的前n个节点</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseLinked</span> <span class="token punctuation">{</span>\n\n\t<span class="token class-name">ListNode</span> successor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseN</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\tsuccessor <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">return</span> head<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\n\t\t\t<span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\thead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\t\t\thead<span class="token punctuation">.</span>next <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n\n\t\t\t<span class="token keyword">return</span> last<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="反转链表的一部分" tabindex="-1"><a class="header-anchor" href="#反转链表的一部分" aria-hidden="true">#</a> 反转链表的一部分</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseLinked</span> <span class="token punctuation">{</span>\n\n\t<span class="token comment">// 记录区间结尾的后驱节点</span>\n\t<span class="token class-name">ListNode</span> successor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// 使用递归的方式进行反转</span>\n\t<span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 当m = 1时，相当于反转前n个节点</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// 其他的时候，递归处理</span>\n\t\thead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> head<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token doc-comment comment">/**\n\t * 反转前n个节点, 返回新的节点头\n\t */</span>\n\t<span class="token class-name">ListNode</span> <span class="token function">reverseN</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 记录第n + 1个节点，从这个节点开始不用反转，直接拼到反转后的节点即可</span>\n\t\t\tsuccessor <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> head<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// 以head.next为头，则需要反转前 n-1 个节点</span>\n\t\t<span class="token class-name">ListNode</span> last <span class="token operator">=</span> <span class="token function">reverseN</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token comment">//</span>\n\t\thead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\n\t\t<span class="token comment">// 让反转之后的 head 节点和后面的节点连接起来</span>\n\t\thead<span class="token punctuation">.</span>next <span class="token operator">=</span> successor<span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> last<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="k个一组反转链表" tabindex="-1"><a class="header-anchor" href="#k个一组反转链表" aria-hidden="true">#</a> k个一组反转链表</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> next<span class="token punctuation">;</span>\n\tpre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tnext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n\t\tcur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>\n\t\tpre <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n\t\tcur <span class="token operator">=</span> next<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> pre<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// [a,b)</span>\n<span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> next<span class="token punctuation">;</span>\n\tpre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\tcur <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\tnext <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\t<span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tnext <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n\t\tcur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>\n\t\tpre <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n\t\tcur <span class="token operator">=</span> next<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> pre<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> in k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token class-name">ListNode</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>\n\ta <span class="token operator">=</span> b <span class="token operator">=</span> head<span class="token punctuation">;</span>\n\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> head<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\tb <span class="token operator">=</span> b<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ta<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> newHead<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div>',9),t={render:function(n,s){return p}}}}]);