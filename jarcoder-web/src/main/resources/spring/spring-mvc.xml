<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:lang="http://www.springframework.org/schema/lang" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	         http://www.springframework.org/schema/beans/spring-beans.xsd
	         http://www.springframework.org/schema/lang
	         http://www.springframework.org/schema/lang/spring-lang.xsd
	         http://www.springframework.org/schema/tx
	         http://www.springframework.org/schema/tx/spring-tx.xsd
	         http://www.springframework.org/schema/aop
	         http://www.springframework.org/schema/aop/spring-aop.xsd
	         http://www.springframework.org/schema/mvc
	         http://www.springframework.org/schema/mvc/spring-mvc.xsd
	         http://www.springframework.org/schema/context
	         http://www.springframework.org/schema/context/spring-context.xsd
	         http://www.springframework.org/schema/cache
	         http://www.springframework.org/schema/cache/spring-cache.xsd
	         http://www.springframework.org/schema/task
	         http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- 自动扫描的包名 -->
    <context:component-scan base-package="cn.wjc"></context:component-scan>

    <mvc:annotation-driven/>

    <mvc:default-servlet-handler/>

    <tx:annotation-driven/>

    <task:annotation-driven/>

    <cache:annotation-driven/>

    <!-- spring mvc 基于注解在方法上 控制映射 配置 -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
    <bean
            class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    </bean>

    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--<bean class="com.shishuo.cms.filter.GlobalInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean
                        class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                        p:name="default"/>
                <bean
                        class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                        p:name="config"/>
                <bean
                        class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                        p:name="folder"/>
                <bean
                        class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                        p:name="article"/>
                <bean
                        class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
                        p:name="attachment"/>
            </set>
        </property>
    </bean>

    <!-- 在XML配置文件中加入外部属性文件，当然也可以指定外部文件的编码 -->
    <!--<bean id="propertyConfigurer"-->
    <!--class="com.shishuo.cms.util.PropertyUtils">-->
    <!--<property name="locations">-->
    <!--<list>-->
    <!--<value>classpath:shishuocms.properties</value> &lt;!&ndash; 指定外部文件的编码 &ndash;&gt;-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->


    <!-- FreeMarker的配置 -->
    <bean id="freemarkerConfig"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/"/><!-- 指定路径 -->
        <property name="defaultEncoding" value="UTF-8"/><!-- 指定编码格式 -->
        <!--<property name="freemarkerVariables">-->
        <!--<map>-->
        <!--&lt;!&ndash; 所有目录标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_folder_list" value-ref="folderListTag" />-->
        <!--&lt;!&ndash; 单个目录标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_folder" value-ref="folderTag" />-->
        <!--&lt;!&ndash; 文件分页标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_article_page" value-ref="articlePageTag" />-->
        <!--&lt;!&ndash; 单个文件标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_article" value-ref="articleTag" />-->
        <!--&lt;!&ndash; 评论分页标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_comment_page" value-ref="commentPageTag" />-->
        <!--&lt;!&ndash; 附件列表标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_attachment_list" value-ref="attachmentListTag" />-->
        <!--&lt;!&ndash; 附件分页标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_attachment_page" value-ref="attachmentPageTag" />-->
        <!--&lt;!&ndash; 内容截取标签 &ndash;&gt;-->
        <!--<entry key="shishuocms_content_cut" value-ref="contentCutTag" />-->
        <!--</map>-->
        <!--</property>-->
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
                <prop key="whitespace_stripping">true</prop>
            </props>
        </property>
    </bean>

    <!-- 配置 FreeMarker视图解析器 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
        <property name="cache" value="false"/>
        <property name="prefix" value="/WEB-INF/ftl/"/>
        <property name="suffix" value=".ftl"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>

    <!-- 图片上传的配置 -->
    <!--<bean id="multipartResolver"-->
          <!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--&lt;!&ndash; 最大值4M &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="209715200"/>-->
        <!--<property name="resolveLazily" value="true"/>-->
    <!--</bean>-->

    <!-- 登陆时验证码的配置 -->
    <!--<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">-->
    <!--<property name="config">-->
    <!--<bean class="com.google.code.kaptcha.util.Config">-->
    <!--&lt;!&ndash;通过构造函数注入属性值 &ndash;&gt;-->
    <!--<constructor-arg type="java.util.Properties">-->
    <!--<props>-->
    <!--&lt;!&ndash; 验证码宽度 &ndash;&gt;-->
    <!--<prop key="kaptcha.image.width">150</prop>-->
    <!--&lt;!&ndash; 验证码高度 &ndash;&gt;-->
    <!--<prop key="kaptcha.image.height">60</prop>-->
    <!--&lt;!&ndash; 生成验证码内容范围 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.char.string">abcde2345678gfynmnpwx</prop>-->
    <!--&lt;!&ndash; 验证码个数 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.char.length">5</prop>-->
    <!--&lt;!&ndash; 是否有边框 &ndash;&gt;-->
    <!--<prop key="kaptcha.border">no</prop>-->
    <!--&lt;!&ndash; 验证码字体颜色 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.font.color">red</prop>-->
    <!--&lt;!&ndash; 验证码字体大小 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.font.size">35</prop>-->
    <!--&lt;!&ndash; 验证码所属字体样式 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>-->
    <!--<prop key="kaptcha.background.clear.from">white</prop>-->
    <!--<prop key="kaptcha.background.clear.to">white</prop>-->
    <!--<prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.ShadowGimpy</prop>-->
    <!--<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>-->
    <!--&lt;!&ndash; 干扰线颜色 &ndash;&gt;-->
    <!--<prop key="kaptcha.noise.color">red</prop>-->
    <!--&lt;!&ndash; 验证码文本字符间距 &ndash;&gt;-->
    <!--<prop key="kaptcha.textproducer.char.space">4</prop>-->
    <!--</props>-->
    <!--</constructor-arg>-->
    <!--</bean>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- c3p0 connection pool configuration 数据库的配置 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"-->
          <!--destroy-method="close">-->
        <!--<property name="driverClass" value="${jdbc.driverClass}"/>        &lt;!&ndash; 数据库驱动 &ndash;&gt;-->
        <!--<property name="jdbcUrl" value="${jdbc.url}"/>        &lt;!&ndash; 连接URL串 &ndash;&gt;-->
        <!--<property name="user" value="${jdbc.user}"/>        &lt;!&ndash; 连接用户名 &ndash;&gt;-->
        <!--<property name="password" value="${jdbc.password}"/>        &lt;!&ndash; 连接密码 &ndash;&gt;-->
        <!--<property name="initialPoolSize" value="5"/>        &lt;!&ndash; 初始化连接池时连接数量为5个 &ndash;&gt;-->
        <!--<property name="minPoolSize" value="5"/>        &lt;!&ndash; 允许最小连接数量为5个 &ndash;&gt;-->
        <!--<property name="maxPoolSize" value="20"/>        &lt;!&ndash; 允许最大连接数量为20个 &ndash;&gt;-->
        <!--<property name="numHelperThreads" value="20"/>            &lt;!&ndash; 允许最大连接数量为20个 &ndash;&gt;-->
        <!--<property name="maxStatements" value="100"/>        &lt;!&ndash; 允许连接池最大生成100个PreparedStatement对象 &ndash;&gt;-->
        <!--<property name="maxIdleTime" value="3600"/>        &lt;!&ndash; 连接有效时间，连接超过3600秒未使用，则该连接丢弃 &ndash;&gt;-->
        <!--<property name="acquireIncrement" value="2"/>        &lt;!&ndash; 连接用完时，一次产生的新连接步进值为2 &ndash;&gt;-->
        <!--<property name="acquireRetryAttempts" value="5"/>        &lt;!&ndash; 获取连接失败后再尝试10次，再失败则返回DAOException异常 &ndash;&gt;-->
        <!--<property name="acquireRetryDelay" value="600"/>        &lt;!&ndash; 获取下一次连接时最短间隔600毫秒，有助于提高性能 &ndash;&gt;-->
        <!--<property name="testConnectionOnCheckin" value="true"/>        &lt;!&ndash; 检查连接的有效性，此处小弟不是很懂什么意思 &ndash;&gt;-->
        <!--<property name="idleConnectionTestPeriod" value="1200"/>        &lt;!&ndash; 每个1200秒检查连接对象状态 &ndash;&gt;-->
        <!--<property name="checkoutTimeout" value="10000"/>        &lt;!&ndash; 获取新连接的超时时间为10000毫秒 &ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 创建SqlSessionFactory，同时指定数据源 &ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
    <!--<bean id="transactionManager"-->
          <!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;创建数据映射器，数据映射器必须为接口 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="annotationClass" value="org.springframework.stereotype.Repository"/>-->
        <!--<property name="basePackage" value="com.shishuo.cms.dao"/>-->
    <!--</bean>-->

</beans>